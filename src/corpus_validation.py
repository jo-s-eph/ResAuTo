#!/usr/bin/env python
"""Script de validation du corpus de contes.

V√©rifie que tous les fichiers n√©cessaires sont pr√©sents et pr√™ts pour l'√©valuation.
"""

from pathlib import Path
import sys

def validate_corpus():
    """Valide la compl√©tude du corpus de contes."""
    
    corpus_dir = Path("/Users/josephmaouche/Desktop/fac/S6/ResAuTo/assets/corpus_contes")
    
    # Liste des fichiers attendus (sans les instructions de remplissage)
    expected_files = [
        # Contes de f√©es classiques
        ("conte_cendrillon.txt", "conte_cendrillon_reference.txt"),
        ("conte_petitchaperon.txt", "conte_petitchaperon_reference.txt"),
        ("conte_blancheneige.txt", "conte_blancheneige_reference.txt"),
        
        # Contes populaires/folkloriques
        ("folklorique_barbe_bleue.txt", "folklorique_barbe_bleue_reference.txt"),
        ("folklorique_belle_bete.txt", "folklorique_belle_bete_reference.txt"),
        
        # Fables
        ("fable_cigale_fourmi.txt", "fable_cigale_fourmi_reference.txt"),
        ("fable_corbeau_renard.txt", "fable_corbeau_renard_reference.txt"),
        
        # Nouvelles
        ("nouvelle_maupassant.txt", "nouvelle_maupassant_reference.txt"),
        ("nouvelle_alphonse_daudet.txt", "nouvelle_alphonse_daudet_reference.txt"),
        
        # L√©gende
        ("legende_arthur.txt", "legende_arthur_reference.txt")
    ]
    
    print("=== VALIDATION DU CORPUS DE CONTES ===")
    print(f"R√©pertoire: {corpus_dir}")
    print(f"Fichiers attendus: {len(expected_files)} paires")
    
    missing_files = []
    empty_files = []
    ready_files = []
    
    for text_file, ref_file in expected_files:
        text_path = corpus_dir / text_file
        ref_path = corpus_dir / ref_file
        
        # V√©rifier existence
        if not text_path.exists():
            missing_files.append(text_file)
            continue
        if not ref_path.exists():
            missing_files.append(ref_file)
            continue
        
        # V√©rifier contenu (non vide et pas juste instructions)
        with open(text_path, 'r', encoding='utf-8') as f:
            text_content = f.read().strip()
        with open(ref_path, 'r', encoding='utf-8') as f:
            ref_content = f.read().strip()
        
        # Consid√©rer comme vide si contient seulement des instructions
        text_is_placeholder = (
            len(text_content) < 200 or 
            "Instructions de remplissage" in text_content or
            text_content.count('#') > len(text_content.split('\n')) / 2
        )
        ref_is_placeholder = (
            len(ref_content) < 50 or
            "√Ä compl√©ter" in ref_content or
            ref_content.count('#') > len(ref_content.split('\n')) / 2
        )
        
        if text_is_placeholder:
            empty_files.append(f"{text_file} (placeholder)")
        elif ref_is_placeholder:
            empty_files.append(f"{ref_file} (placeholder)")
        else:
            ready_files.append((text_file, len(text_content.split()), len(ref_content.split())))
    
    # Rapport
    print(f"\n‚úÖ FICHIERS PR√äTS: {len(ready_files)}")
    for text_file, text_words, ref_words in ready_files:
        compression = ref_words / text_words if text_words > 0 else 0
        print(f"  ‚Ä¢ {text_file.replace('.txt', '')}: {text_words} mots ‚Üí {ref_words} mots ({compression:.1%})")
    
    if empty_files:
        print(f"\n‚ö†Ô∏è  FICHIERS √Ä REMPLIR: {len(empty_files)}")
        for file in empty_files:
            print(f"  ‚Ä¢ {file}")
    
    if missing_files:
        print(f"\n‚ùå FICHIERS MANQUANTS: {len(missing_files)}")
        for file in missing_files:
            print(f"  ‚Ä¢ {file}")
    
    # Status global
    total_expected = len(expected_files) * 2  # texte + r√©f√©rence
    total_ready = len(ready_files) * 2
    completion_rate = total_ready / total_expected
    
    print(f"\nüìä TAUX DE COMPL√âTION: {completion_rate:.1%} ({total_ready}/{total_expected} fichiers)")
    
    if completion_rate == 1.0:
        print("üéâ CORPUS COMPLET! Pr√™t pour l'√©valuation.")
        return True
    else:
        print(f"üìù Encore {total_expected - total_ready} fichiers √† compl√©ter.")
        return False

def show_next_steps():
    """Affiche les prochaines √©tapes."""
    print("\n=== PROCHAINES √âTAPES ===")
    print("1. Remplir les fichiers textes vides avec du contenu de qualit√©")
    print("2. Cr√©er les r√©sum√©s de r√©f√©rence manuels (30% du texte original)")
    print("3. Lancer l'√©valuation comparative:")
    print("   python src/tale_evaluation.py")
    print("\nüí° CONSEILS POUR LES R√âF√âRENCES:")
    print("   ‚Ä¢ Pr√©server la structure narrative (d√©but-milieu-fin)")
    print("   ‚Ä¢ Inclure personnages principaux et actions cl√©s")
    print("   ‚Ä¢ Garder les formules importantes ('Il √©tait une fois', morales)")
    print("   ‚Ä¢ Viser ~30% de la longueur originale")

if __name__ == "__main__":
    is_complete = validate_corpus()
    if not is_complete:
        show_next_steps()
